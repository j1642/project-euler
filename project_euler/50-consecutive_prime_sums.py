# Problem 50 - Consecutive Prime Sum
# https://projecteuler.net/problem=50

@time_this
def prime_sieve(max_range):
    'Sieve of Eratosthenes.'
    primes = []
    is_prime = [True] * (max_range)
    
    for num in range(2, int(max_range ** 0.5) + 1):
        if is_prime[num] is True:
            multiple = num * num
            while multiple < max_range:
                is_prime[multiple] = False
                multiple += num
                
    for ind, val in enumerate(is_prime):
        if val is True and ind != 0 and ind != 1:
            primes.append(ind)
    
    return primes, max_range

@time_this
def largest_prime_sum(primes_range: tuple):
    '''Return prime sum (which is less than max_range) of the longest set
    of consecutive primes.
    E.g. 41 is prime sum of longest set of consecutive primes below 100.
    41 = 2 + 3 + 5 + 7 + 11 + 13 (sum of six consecutive primes)
    '''
    primes = primes_range[0]
    # Set is a hashed structure, allows for quick membership checks.
    primes_membership = set(primes)
    max_range = primes_range[1]
    sums_len_addends = []
    
    # Shift index to get new consecutive runs to search for prime sums
    for index, _ in enumerate(primes):
        prime_sums = []
        total = 0
        consecutive_length = 0
        
        for prime in primes[index:]:
            total += prime
            consecutive_length += 1
            if total in primes_membership:
                prime_sums.append(total)
                len_last_prime_sum_append = consecutive_length
            if total >= max_range:
                sums_len_addends.append((len_last_prime_sum_append, prime_sums))
                break
        sums_len_addends.append((len_last_prime_sum_append, prime_sums))
    
    # Returns tuple of the length of consecutive primes contributing to the
    #   sum, followed by a list of prime sums generated by adding those
    #   consecutive primes. The last item of the list is the largest prime sum.
    return max(sums_len_addends)[1][-1]
    
largest_prime_sum(prime_sieve(1000000))
